(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{389:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"在进入公司里的第一件事就是拉代码-可见git的重要性。在此我特别记录一些我在开发中和工作中遇到的坑-以示警戒"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在进入公司里的第一件事就是拉代码-可见git的重要性。在此我特别记录一些我在开发中和工作中遇到的坑-以示警戒"}},[s._v("#")]),s._v(" 在进入公司里的第一件事就是拉代码，可见git的重要性。在此我特别记录一些我在开发中和工作中遇到的坑，以示警戒")]),s._v(" "),t("h2",{attrs:{id:"公司里的分支结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#公司里的分支结构"}},[s._v("#")]),s._v(" 公司里的分支结构")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("分支名称")]),s._v(" "),t("th",[s._v("解释")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("master")]),s._v(" "),t("td",[s._v("主分支，也是生产分支，已经上线的app就是基于这个分支，也是最稳定的分支。")])]),s._v(" "),t("tr",[t("td",[s._v("feature/task_xxxxx")]),s._v(" "),t("td",[s._v("开发分支，基于master拉下来的分支，一般以需规编号命名")])]),s._v(" "),t("tr",[t("td",[s._v("sit")]),s._v(" "),t("td",[s._v("单元测试分支，开发分支开发完成后发起merge request请求，合并到sit分支供测试人员测试")])]),s._v(" "),t("tr",[t("td",[s._v("uat")]),s._v(" "),t("td",[s._v("业务测试分支，sit分支测试完成后，再合到此分支进一步测试")])]),s._v(" "),t("tr",[t("td",[s._v("rel(release)")]),s._v(" "),t("td",[s._v("预发布分支，在测试后确认没有bug后合并到此分支等待投产")])])])]),s._v(" "),t("h2",{attrs:{id:"公司项目拉下来后跑不下来原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#公司项目拉下来后跑不下来原因"}},[s._v("#")]),s._v(" 公司项目拉下来后跑不下来原因")]),s._v(" "),t("p",[s._v("一般公司都会对自己的项目设置很多东西，如npm的、gitLab的设置等，此时跑不下来是正常的\n，不要惊慌，向同事索要配置文档全部跑一遍就好了")]),s._v(" "),t("h2",{attrs:{id:"git-push注意点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-push注意点"}},[s._v("#")]),s._v(" git push注意点")]),s._v(" "),t("p",[s._v("当项目拉下来后，npm i后会导致很多文件被改变，当我们开发完成后，一定要对所有已修改文件选择性暂存。")]),s._v(" "),t("p",[t("strong",[s._v("严格执行只push自己对于实现功能的文件（如vue/js文件等），package.lock一定不能push上远程。")])]),s._v(" "),t("p",[t("strong",[s._v("package文件原则上只在涉及到依赖包升级的情况下向上申请同意后再push。")])]),s._v(" "),t("h2",{attrs:{id:"代码回退"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码回退"}},[s._v("#")]),s._v(" 代码回退")]),s._v(" "),t("p",[s._v("开发时总会不可避免的不小心错误push操作，这时我们可以使用"),t("code",[s._v("git log")]),s._v("或者去gitLab远程history历史查看想要回退的commit的SHA值(这个值很长，千万不能复制错了，我踩坑过)，然后使用如下代码进行回退：")]),s._v(" "),t("p",[s._v("1."),t("code",[s._v("git reset --soft xxxxxxxxxxxxxxxx")])]),s._v(" "),t("p",[s._v("2."),t("code",[s._v("git reset --hard xxxxxxxxxxxxxxxx")])]),s._v(" "),t("blockquote",[t("p",[s._v("‘xxxxxxxxx’为需要回退的版本号SHA值。")])]),s._v(" "),t("p",[s._v("两种命令区别： "),t("strong",[s._v("--soft是软回退，回退后不会抹除当前的代码；--hard是硬回退，回退的同时直接抹除当前代码，回到回退版本的代码。")])]),s._v(" "),t("h2",{attrs:{id:"设置本地分支关联远程分支"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置本地分支关联远程分支"}},[s._v("#")]),s._v(" 设置本地分支关联远程分支")]),s._v(" "),t("p",[s._v("当某个分支第一次push时需要设置当前分支关联的远程分支，否则git不知道往远程哪个分支push。代码如下：")]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git push --set-upstream origin "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"your ref branch"')]),s._v("\n简写： git push -u "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"your ref branch"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"github-push-404-or-connection-error"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#github-push-404-or-connection-error"}},[s._v("#")]),s._v(" gitHub push 404 or connection error")]),s._v(" "),t("ol",[t("li",[t("p",[t("code",[s._v("git config --global http.sslverify false")])])]),s._v(" "),t("li",[t("p",[s._v("保证连接的远程存储库是SSH类型的")])])]),s._v(" "),t("ul",[t("li",[s._v("HTTPS类型 如 "),t("code",[s._v("git@github.com:codeLove9/myBlog.git")]),s._v(" 的是以互联网形式进行push的，大多数情况下需要很好的网络（科学上网工具）才能保证push的上去")]),s._v(" "),t("li",[s._v("SSH类型 如 "),t("code",[s._v("https://github.com/codeLove9/myBlog.git")]),s._v(" 是另外一种协议，类似于直连，可以不受当前网络的影响，大大增加push成功率")])]),s._v(" "),t("blockquote",[t("p",[s._v("如果链接SSH仓库失败，就是当前本地没有配置SSH密钥，配置的具体方案见此 "),t("a",{attrs:{href:"https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5",target:"_blank",rel:"noopener noreferrer"}},[s._v("服务器上的 Git - 生成 SSH 公钥"),t("OutboundLink")],1)])]),s._v(" "),t("h2",{attrs:{id:"修改git已提交的commit中提交者的用户名和邮箱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改git已提交的commit中提交者的用户名和邮箱"}},[s._v("#")]),s._v(" 修改git已提交的commit中提交者的用户名和邮箱")]),s._v(" "),t("p",[s._v("之前新买的电脑不知道是不是忘记设置全局用户名和邮箱了，有一天发现明明天天都在commit，可是github活跃度表竟然都没有小绿格，血泪教训。查看commit history后发现提交用户名是本机的默认user，大概就是忘记设置git了。")]),s._v(" "),t("p",[s._v("如下图中,将已经提交的commit中,用户名"),t("code",[s._v("jincheng-demo,jincheng-demo01")]),s._v(",邮箱"),t("code",[s._v("jincheng@test.com")])]),s._v(" "),t("p",[s._v("修改为正确的用户名:"),t("code",[s._v("jincheng")]),s._v(",正确的邮箱:"),t("code",[s._v("jincheng_921@163.com")]),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210714150220957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmNoZW5nXzkyMQ==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),s._v(" "),t("h3",{attrs:{id:"步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[s._v("#")]),s._v(" 步骤")]),s._v(" "),t("p",[s._v("1.打开"),t("code",[s._v("git bash here")]),s._v(" 客户端\n2.复制需要修改的项目的git地址")]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git clone --bare https://gitee.com/xxxx/test01.git(这里替换成自己的git地址)\ncd test01.git (clone完成后,进入项目目录)`\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("3.建议执行以下命令,查看当前的git提交后的用户名和邮箱")]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git config user.name\ngit config user.email\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("4.复制脚本,并修改成自己的信息,粘贴到"),t("code",[s._v("git bash here")]),s._v("客户端中,按enter执行"),t("br"),s._v(" "),t("code",[s._v("OLD_EMAIL")]),s._v(":原来的邮箱名称,这里我的是"),t("code",[s._v("jincheng@test.com")]),t("br"),s._v(" "),t("code",[s._v("CORRECT_NAME")]),s._v(":新的用户名称,我自己的是"),t("code",[s._v("jincheng")]),t("br"),s._v(" "),t("code",[s._v("CORRECT_EMAIL")]),s._v(":新的邮箱,"),t("code",[s._v("jincheng_921@163.com")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\ngit filter-branch --env-filter '\n\nOLD_EMAIL="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"jincheng@test.com"')]),s._v("\nCORRECT_NAME="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"jincheng"')]),s._v("\nCORRECT_EMAIL="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"jincheng_921@163.com"')]),s._v("\n\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$GIT_COMMITTER_EMAIL"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$OLD_EMAIL"')]),s._v(" ]\nthen\nexport GIT_COMMITTER_NAME="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$CORRECT_NAME"')]),s._v("\nexport GIT_COMMITTER_EMAIL="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$CORRECT_EMAIL"')]),s._v("\nfi\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$GIT_AUTHOR_EMAIL"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$OLD_EMAIL"')]),s._v(" ]\nthen\nexport GIT_AUTHOR_NAME="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$CORRECT_NAME"')]),s._v("\nexport GIT_AUTHOR_EMAIL="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$CORRECT_EMAIL"')]),s._v("\nfi\n' --tag-name-filter cat -- --branches --tags\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[s._v("执行后,如下图绿色框中的输出,如果项目本身提交次数很多,则需要等待全部执行完成")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210714152244206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmNoZW5nXzkyMQ==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),t("br"),s._v("\n5.上一条脚本信息执行完成后,执行一下git命令")]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git push --force --tags origin "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/heads/*'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("查看提交的日志信息,用户名和邮箱已经修改过来了"),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210714153030167.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmNoZW5nXzkyMQ==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}})]),s._v(" "),t("p",[s._v("git服务端也修改成功"),t("br"),s._v(" "),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20210714153233898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppbmNoZW5nXzkyMQ==,size_16,color_FFFFFF,t_70#pic_center",alt:"在这里插入图片描述"}}),t("br"),s._v("\n6.清理本地信息")]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("cd ..\nrm -rf test01.git\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("备注")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("git clone --bare")]),s._v(" 没有clone项目的全部文件,所以修改完用户名和邮箱,可以直接清理掉")]),s._v(" "),t("li",[s._v("如果本地之前有clone过完整项目,建议直接清理掉,再重新clone.(我一开始直接pull,再push,发现本地历史记录又覆盖了之前修改的用户名和邮箱,清理掉,直接重新clone,就没有问题了)")])])]),s._v(" "),t("h2",{attrs:{id:"本地dist文件夹部署到gh-pages"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地dist文件夹部署到gh-pages"}},[s._v("#")]),s._v(" 本地dist文件夹部署到gh-pages")]),s._v(" "),t("h3",{attrs:{id:"背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[s._v("#")]),s._v(" 背景")]),s._v(" "),t("p",[s._v("之前部署的方案是每次都要在项目外部重新再建一个夹子，把项目里打包好的文件都复制替换掉，再push到远端，但是这样做每次都显得很麻烦，我就在思考有没有什么方便的方法")]),s._v(" "),t("h3",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[s._v("#")]),s._v(" 解决方案")]),s._v(" "),t("p",[s._v("后来我发现了用shell脚本可以解决这个问题，只需要在项目里建一个.sh文件（一般命名为deploy.sh），需要部署的时候直接执行"),t("code",[s._v("bash deploy.sh")]),s._v("命令，就会自动把dist文件下的所有文件推送到远端gh-pages分支下，省时又省力，彷佛一下子打开了新世界的大门！！")]),s._v(" "),t("p",[s._v("下面贴出.sh脚本文件的代码段")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1.运行命令： bash deploy.sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 在vsCode终端或者cmd中运行会抛出错误")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3. 需要在powerShell或者gitBash中运行")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 确保脚本抛出遇到的错误")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-e")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 生成静态文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" run blog:build\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入生成的文件夹")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" blog/.vuepress/dist\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 提交到git本地暂存区")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" init\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-A")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-m")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'deploy'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果发布到 https://<USERNAME>.github.io")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果发布到 https://<USERNAME>.github.io/<REPO>")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" push "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[s._v("-f")]),s._v(" git@github.com:codeLove9/myBlog.git master:gh-pages\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 回到原来的目录")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" -\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);